window.pdocSearch = (function(){
/** elasticlunr - http://weixsong.github.io * Copyright (C) 2017 Oliver Nightingale * Copyright (C) 2017 Wei Song * MIT Licensed */!function(){function e(e){if(null===e||"object"!=typeof e)return e;var t=e.constructor();for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);return t}var t=function(e){var n=new t.Index;return n.pipeline.add(t.trimmer,t.stopWordFilter,t.stemmer),e&&e.call(n,n),n};t.version="0.9.5",lunr=t,t.utils={},t.utils.warn=function(e){return function(t){e.console&&console.warn&&console.warn(t)}}(this),t.utils.toString=function(e){return void 0===e||null===e?"":e.toString()},t.EventEmitter=function(){this.events={}},t.EventEmitter.prototype.addListener=function(){var e=Array.prototype.slice.call(arguments),t=e.pop(),n=e;if("function"!=typeof t)throw new TypeError("last argument must be a function");n.forEach(function(e){this.hasHandler(e)||(this.events[e]=[]),this.events[e].push(t)},this)},t.EventEmitter.prototype.removeListener=function(e,t){if(this.hasHandler(e)){var n=this.events[e].indexOf(t);-1!==n&&(this.events[e].splice(n,1),0==this.events[e].length&&delete this.events[e])}},t.EventEmitter.prototype.emit=function(e){if(this.hasHandler(e)){var t=Array.prototype.slice.call(arguments,1);this.events[e].forEach(function(e){e.apply(void 0,t)},this)}},t.EventEmitter.prototype.hasHandler=function(e){return e in this.events},t.tokenizer=function(e){if(!arguments.length||null===e||void 0===e)return[];if(Array.isArray(e)){var n=e.filter(function(e){return null===e||void 0===e?!1:!0});n=n.map(function(e){return t.utils.toString(e).toLowerCase()});var i=[];return n.forEach(function(e){var n=e.split(t.tokenizer.seperator);i=i.concat(n)},this),i}return e.toString().trim().toLowerCase().split(t.tokenizer.seperator)},t.tokenizer.defaultSeperator=/[\s\-]+/,t.tokenizer.seperator=t.tokenizer.defaultSeperator,t.tokenizer.setSeperator=function(e){null!==e&&void 0!==e&&"object"==typeof e&&(t.tokenizer.seperator=e)},t.tokenizer.resetSeperator=function(){t.tokenizer.seperator=t.tokenizer.defaultSeperator},t.tokenizer.getSeperator=function(){return t.tokenizer.seperator},t.Pipeline=function(){this._queue=[]},t.Pipeline.registeredFunctions={},t.Pipeline.registerFunction=function(e,n){n in t.Pipeline.registeredFunctions&&t.utils.warn("Overwriting existing registered function: "+n),e.label=n,t.Pipeline.registeredFunctions[n]=e},t.Pipeline.getRegisteredFunction=function(e){return e in t.Pipeline.registeredFunctions!=!0?null:t.Pipeline.registeredFunctions[e]},t.Pipeline.warnIfFunctionNotRegistered=function(e){var n=e.label&&e.label in this.registeredFunctions;n||t.utils.warn("Function is not registered with pipeline. This may cause problems when serialising the index.\n",e)},t.Pipeline.load=function(e){var n=new t.Pipeline;return e.forEach(function(e){var i=t.Pipeline.getRegisteredFunction(e);if(!i)throw new Error("Cannot load un-registered function: "+e);n.add(i)}),n},t.Pipeline.prototype.add=function(){var e=Array.prototype.slice.call(arguments);e.forEach(function(e){t.Pipeline.warnIfFunctionNotRegistered(e),this._queue.push(e)},this)},t.Pipeline.prototype.after=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i+1,0,n)},t.Pipeline.prototype.before=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i,0,n)},t.Pipeline.prototype.remove=function(e){var t=this._queue.indexOf(e);-1!==t&&this._queue.splice(t,1)},t.Pipeline.prototype.run=function(e){for(var t=[],n=e.length,i=this._queue.length,o=0;n>o;o++){for(var r=e[o],s=0;i>s&&(r=this._queue[s](r,o,e),void 0!==r&&null!==r);s++);void 0!==r&&null!==r&&t.push(r)}return t},t.Pipeline.prototype.reset=function(){this._queue=[]},t.Pipeline.prototype.get=function(){return this._queue},t.Pipeline.prototype.toJSON=function(){return this._queue.map(function(e){return t.Pipeline.warnIfFunctionNotRegistered(e),e.label})},t.Index=function(){this._fields=[],this._ref="id",this.pipeline=new t.Pipeline,this.documentStore=new t.DocumentStore,this.index={},this.eventEmitter=new t.EventEmitter,this._idfCache={},this.on("add","remove","update",function(){this._idfCache={}}.bind(this))},t.Index.prototype.on=function(){var e=Array.prototype.slice.call(arguments);return this.eventEmitter.addListener.apply(this.eventEmitter,e)},t.Index.prototype.off=function(e,t){return this.eventEmitter.removeListener(e,t)},t.Index.load=function(e){e.version!==t.version&&t.utils.warn("version mismatch: current "+t.version+" importing "+e.version);var n=new this;n._fields=e.fields,n._ref=e.ref,n.documentStore=t.DocumentStore.load(e.documentStore),n.pipeline=t.Pipeline.load(e.pipeline),n.index={};for(var i in e.index)n.index[i]=t.InvertedIndex.load(e.index[i]);return n},t.Index.prototype.addField=function(e){return this._fields.push(e),this.index[e]=new t.InvertedIndex,this},t.Index.prototype.setRef=function(e){return this._ref=e,this},t.Index.prototype.saveDocument=function(e){return this.documentStore=new t.DocumentStore(e),this},t.Index.prototype.addDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.addDoc(i,e),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));this.documentStore.addFieldLength(i,n,o.length);var r={};o.forEach(function(e){e in r?r[e]+=1:r[e]=1},this);for(var s in r){var u=r[s];u=Math.sqrt(u),this.index[n].addToken(s,{ref:i,tf:u})}},this),n&&this.eventEmitter.emit("add",e,this)}},t.Index.prototype.removeDocByRef=function(e){if(e&&this.documentStore.isDocStored()!==!1&&this.documentStore.hasDoc(e)){var t=this.documentStore.getDoc(e);this.removeDoc(t,!1)}},t.Index.prototype.removeDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.hasDoc(i)&&(this.documentStore.removeDoc(i),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));o.forEach(function(e){this.index[n].removeToken(e,i)},this)},this),n&&this.eventEmitter.emit("remove",e,this))}},t.Index.prototype.updateDoc=function(e,t){var t=void 0===t?!0:t;this.removeDocByRef(e[this._ref],!1),this.addDoc(e,!1),t&&this.eventEmitter.emit("update",e,this)},t.Index.prototype.idf=function(e,t){var n="@"+t+"/"+e;if(Object.prototype.hasOwnProperty.call(this._idfCache,n))return this._idfCache[n];var i=this.index[t].getDocFreq(e),o=1+Math.log(this.documentStore.length/(i+1));return this._idfCache[n]=o,o},t.Index.prototype.getFields=function(){return this._fields.slice()},t.Index.prototype.search=function(e,n){if(!e)return[];e="string"==typeof e?{any:e}:JSON.parse(JSON.stringify(e));var i=null;null!=n&&(i=JSON.stringify(n));for(var o=new t.Configuration(i,this.getFields()).get(),r={},s=Object.keys(e),u=0;u<s.length;u++){var a=s[u];r[a]=this.pipeline.run(t.tokenizer(e[a]))}var l={};for(var c in o){var d=r[c]||r.any;if(d){var f=this.fieldSearch(d,c,o),h=o[c].boost;for(var p in f)f[p]=f[p]*h;for(var p in f)p in l?l[p]+=f[p]:l[p]=f[p]}}var v,g=[];for(var p in l)v={ref:p,score:l[p]},this.documentStore.hasDoc(p)&&(v.doc=this.documentStore.getDoc(p)),g.push(v);return g.sort(function(e,t){return t.score-e.score}),g},t.Index.prototype.fieldSearch=function(e,t,n){var i=n[t].bool,o=n[t].expand,r=n[t].boost,s=null,u={};return 0!==r?(e.forEach(function(e){var n=[e];1==o&&(n=this.index[t].expandToken(e));var r={};n.forEach(function(n){var o=this.index[t].getDocs(n),a=this.idf(n,t);if(s&&"AND"==i){var l={};for(var c in s)c in o&&(l[c]=o[c]);o=l}n==e&&this.fieldSearchStats(u,n,o);for(var c in o){var d=this.index[t].getTermFrequency(n,c),f=this.documentStore.getFieldLength(c,t),h=1;0!=f&&(h=1/Math.sqrt(f));var p=1;n!=e&&(p=.15*(1-(n.length-e.length)/n.length));var v=d*a*h*p;c in r?r[c]+=v:r[c]=v}},this),s=this.mergeScores(s,r,i)},this),s=this.coordNorm(s,u,e.length)):void 0},t.Index.prototype.mergeScores=function(e,t,n){if(!e)return t;if("AND"==n){var i={};for(var o in t)o in e&&(i[o]=e[o]+t[o]);return i}for(var o in t)o in e?e[o]+=t[o]:e[o]=t[o];return e},t.Index.prototype.fieldSearchStats=function(e,t,n){for(var i in n)i in e?e[i].push(t):e[i]=[t]},t.Index.prototype.coordNorm=function(e,t,n){for(var i in e)if(i in t){var o=t[i].length;e[i]=e[i]*o/n}return e},t.Index.prototype.toJSON=function(){var e={};return this._fields.forEach(function(t){e[t]=this.index[t].toJSON()},this),{version:t.version,fields:this._fields,ref:this._ref,documentStore:this.documentStore.toJSON(),index:e,pipeline:this.pipeline.toJSON()}},t.Index.prototype.use=function(e){var t=Array.prototype.slice.call(arguments,1);t.unshift(this),e.apply(this,t)},t.DocumentStore=function(e){this._save=null===e||void 0===e?!0:e,this.docs={},this.docInfo={},this.length=0},t.DocumentStore.load=function(e){var t=new this;return t.length=e.length,t.docs=e.docs,t.docInfo=e.docInfo,t._save=e.save,t},t.DocumentStore.prototype.isDocStored=function(){return this._save},t.DocumentStore.prototype.addDoc=function(t,n){this.hasDoc(t)||this.length++,this.docs[t]=this._save===!0?e(n):null},t.DocumentStore.prototype.getDoc=function(e){return this.hasDoc(e)===!1?null:this.docs[e]},t.DocumentStore.prototype.hasDoc=function(e){return e in this.docs},t.DocumentStore.prototype.removeDoc=function(e){this.hasDoc(e)&&(delete this.docs[e],delete this.docInfo[e],this.length--)},t.DocumentStore.prototype.addFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&(this.docInfo[e]||(this.docInfo[e]={}),this.docInfo[e][t]=n)},t.DocumentStore.prototype.updateFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&this.addFieldLength(e,t,n)},t.DocumentStore.prototype.getFieldLength=function(e,t){return null===e||void 0===e?0:e in this.docs&&t in this.docInfo[e]?this.docInfo[e][t]:0},t.DocumentStore.prototype.toJSON=function(){return{docs:this.docs,docInfo:this.docInfo,length:this.length,save:this._save}},t.stemmer=function(){var e={ational:"ate",tional:"tion",enci:"ence",anci:"ance",izer:"ize",bli:"ble",alli:"al",entli:"ent",eli:"e",ousli:"ous",ization:"ize",ation:"ate",ator:"ate",alism:"al",iveness:"ive",fulness:"ful",ousness:"ous",aliti:"al",iviti:"ive",biliti:"ble",logi:"log"},t={icate:"ic",ative:"",alize:"al",iciti:"ic",ical:"ic",ful:"",ness:""},n="[^aeiou]",i="[aeiouy]",o=n+"[^aeiouy]*",r=i+"[aeiou]*",s="^("+o+")?"+r+o,u="^("+o+")?"+r+o+"("+r+")?$",a="^("+o+")?"+r+o+r+o,l="^("+o+")?"+i,c=new RegExp(s),d=new RegExp(a),f=new RegExp(u),h=new RegExp(l),p=/^(.+?)(ss|i)es$/,v=/^(.+?)([^s])s$/,g=/^(.+?)eed$/,m=/^(.+?)(ed|ing)$/,y=/.$/,S=/(at|bl|iz)$/,x=new RegExp("([^aeiouylsz])\\1$"),w=new RegExp("^"+o+i+"[^aeiouwxy]$"),I=/^(.+?[^aeiou])y$/,b=/^(.+?)(ational|tional|enci|anci|izer|bli|alli|entli|eli|ousli|ization|ation|ator|alism|iveness|fulness|ousness|aliti|iviti|biliti|logi)$/,E=/^(.+?)(icate|ative|alize|iciti|ical|ful|ness)$/,D=/^(.+?)(al|ance|ence|er|ic|able|ible|ant|ement|ment|ent|ou|ism|ate|iti|ous|ive|ize)$/,F=/^(.+?)(s|t)(ion)$/,_=/^(.+?)e$/,P=/ll$/,k=new RegExp("^"+o+i+"[^aeiouwxy]$"),z=function(n){var i,o,r,s,u,a,l;if(n.length<3)return n;if(r=n.substr(0,1),"y"==r&&(n=r.toUpperCase()+n.substr(1)),s=p,u=v,s.test(n)?n=n.replace(s,"$1$2"):u.test(n)&&(n=n.replace(u,"$1$2")),s=g,u=m,s.test(n)){var z=s.exec(n);s=c,s.test(z[1])&&(s=y,n=n.replace(s,""))}else if(u.test(n)){var z=u.exec(n);i=z[1],u=h,u.test(i)&&(n=i,u=S,a=x,l=w,u.test(n)?n+="e":a.test(n)?(s=y,n=n.replace(s,"")):l.test(n)&&(n+="e"))}if(s=I,s.test(n)){var z=s.exec(n);i=z[1],n=i+"i"}if(s=b,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+e[o])}if(s=E,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+t[o])}if(s=D,u=F,s.test(n)){var z=s.exec(n);i=z[1],s=d,s.test(i)&&(n=i)}else if(u.test(n)){var z=u.exec(n);i=z[1]+z[2],u=d,u.test(i)&&(n=i)}if(s=_,s.test(n)){var z=s.exec(n);i=z[1],s=d,u=f,a=k,(s.test(i)||u.test(i)&&!a.test(i))&&(n=i)}return s=P,u=d,s.test(n)&&u.test(n)&&(s=y,n=n.replace(s,"")),"y"==r&&(n=r.toLowerCase()+n.substr(1)),n};return z}(),t.Pipeline.registerFunction(t.stemmer,"stemmer"),t.stopWordFilter=function(e){return e&&t.stopWordFilter.stopWords[e]!==!0?e:void 0},t.clearStopWords=function(){t.stopWordFilter.stopWords={}},t.addStopWords=function(e){null!=e&&Array.isArray(e)!==!1&&e.forEach(function(e){t.stopWordFilter.stopWords[e]=!0},this)},t.resetStopWords=function(){t.stopWordFilter.stopWords=t.defaultStopWords},t.defaultStopWords={"":!0,a:!0,able:!0,about:!0,across:!0,after:!0,all:!0,almost:!0,also:!0,am:!0,among:!0,an:!0,and:!0,any:!0,are:!0,as:!0,at:!0,be:!0,because:!0,been:!0,but:!0,by:!0,can:!0,cannot:!0,could:!0,dear:!0,did:!0,"do":!0,does:!0,either:!0,"else":!0,ever:!0,every:!0,"for":!0,from:!0,get:!0,got:!0,had:!0,has:!0,have:!0,he:!0,her:!0,hers:!0,him:!0,his:!0,how:!0,however:!0,i:!0,"if":!0,"in":!0,into:!0,is:!0,it:!0,its:!0,just:!0,least:!0,let:!0,like:!0,likely:!0,may:!0,me:!0,might:!0,most:!0,must:!0,my:!0,neither:!0,no:!0,nor:!0,not:!0,of:!0,off:!0,often:!0,on:!0,only:!0,or:!0,other:!0,our:!0,own:!0,rather:!0,said:!0,say:!0,says:!0,she:!0,should:!0,since:!0,so:!0,some:!0,than:!0,that:!0,the:!0,their:!0,them:!0,then:!0,there:!0,these:!0,they:!0,"this":!0,tis:!0,to:!0,too:!0,twas:!0,us:!0,wants:!0,was:!0,we:!0,were:!0,what:!0,when:!0,where:!0,which:!0,"while":!0,who:!0,whom:!0,why:!0,will:!0,"with":!0,would:!0,yet:!0,you:!0,your:!0},t.stopWordFilter.stopWords=t.defaultStopWords,t.Pipeline.registerFunction(t.stopWordFilter,"stopWordFilter"),t.trimmer=function(e){if(null===e||void 0===e)throw new Error("token should not be undefined");return e.replace(/^\W+/,"").replace(/\W+$/,"")},t.Pipeline.registerFunction(t.trimmer,"trimmer"),t.InvertedIndex=function(){this.root={docs:{},df:0}},t.InvertedIndex.load=function(e){var t=new this;return t.root=e.root,t},t.InvertedIndex.prototype.addToken=function(e,t,n){for(var n=n||this.root,i=0;i<=e.length-1;){var o=e[i];o in n||(n[o]={docs:{},df:0}),i+=1,n=n[o]}var r=t.ref;n.docs[r]?n.docs[r]={tf:t.tf}:(n.docs[r]={tf:t.tf},n.df+=1)},t.InvertedIndex.prototype.hasToken=function(e){if(!e)return!1;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return!1;t=t[e[n]]}return!0},t.InvertedIndex.prototype.getNode=function(e){if(!e)return null;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return null;t=t[e[n]]}return t},t.InvertedIndex.prototype.getDocs=function(e){var t=this.getNode(e);return null==t?{}:t.docs},t.InvertedIndex.prototype.getTermFrequency=function(e,t){var n=this.getNode(e);return null==n?0:t in n.docs?n.docs[t].tf:0},t.InvertedIndex.prototype.getDocFreq=function(e){var t=this.getNode(e);return null==t?0:t.df},t.InvertedIndex.prototype.removeToken=function(e,t){if(e){var n=this.getNode(e);null!=n&&t in n.docs&&(delete n.docs[t],n.df-=1)}},t.InvertedIndex.prototype.expandToken=function(e,t,n){if(null==e||""==e)return[];var t=t||[];if(void 0==n&&(n=this.getNode(e),null==n))return t;n.df>0&&t.push(e);for(var i in n)"docs"!==i&&"df"!==i&&this.expandToken(e+i,t,n[i]);return t},t.InvertedIndex.prototype.toJSON=function(){return{root:this.root}},t.Configuration=function(e,n){var e=e||"";if(void 0==n||null==n)throw new Error("fields should not be null");this.config={};var i;try{i=JSON.parse(e),this.buildUserConfig(i,n)}catch(o){t.utils.warn("user configuration parse failed, will use default configuration"),this.buildDefaultConfig(n)}},t.Configuration.prototype.buildDefaultConfig=function(e){this.reset(),e.forEach(function(e){this.config[e]={boost:1,bool:"OR",expand:!1}},this)},t.Configuration.prototype.buildUserConfig=function(e,n){var i="OR",o=!1;if(this.reset(),"bool"in e&&(i=e.bool||i),"expand"in e&&(o=e.expand||o),"fields"in e)for(var r in e.fields)if(n.indexOf(r)>-1){var s=e.fields[r],u=o;void 0!=s.expand&&(u=s.expand),this.config[r]={boost:s.boost||0===s.boost?s.boost:1,bool:s.bool||i,expand:u}}else t.utils.warn("field name in user configuration not found in index instance fields");else this.addAllFields2UserConfig(i,o,n)},t.Configuration.prototype.addAllFields2UserConfig=function(e,t,n){n.forEach(function(n){this.config[n]={boost:1,bool:e,expand:t}},this)},t.Configuration.prototype.get=function(){return this.config},t.Configuration.prototype.reset=function(){this.config={}},lunr.SortedSet=function(){this.length=0,this.elements=[]},lunr.SortedSet.load=function(e){var t=new this;return t.elements=e,t.length=e.length,t},lunr.SortedSet.prototype.add=function(){var e,t;for(e=0;e<arguments.length;e++)t=arguments[e],~this.indexOf(t)||this.elements.splice(this.locationFor(t),0,t);this.length=this.elements.length},lunr.SortedSet.prototype.toArray=function(){return this.elements.slice()},lunr.SortedSet.prototype.map=function(e,t){return this.elements.map(e,t)},lunr.SortedSet.prototype.forEach=function(e,t){return this.elements.forEach(e,t)},lunr.SortedSet.prototype.indexOf=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;){if(r===e)return o;e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o]}return r===e?o:-1},lunr.SortedSet.prototype.locationFor=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;)e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o];return r>e?o:e>r?o+1:void 0},lunr.SortedSet.prototype.intersect=function(e){for(var t=new lunr.SortedSet,n=0,i=0,o=this.length,r=e.length,s=this.elements,u=e.elements;;){if(n>o-1||i>r-1)break;s[n]!==u[i]?s[n]<u[i]?n++:s[n]>u[i]&&i++:(t.add(s[n]),n++,i++)}return t},lunr.SortedSet.prototype.clone=function(){var e=new lunr.SortedSet;return e.elements=this.toArray(),e.length=e.elements.length,e},lunr.SortedSet.prototype.union=function(e){var t,n,i;this.length>=e.length?(t=this,n=e):(t=e,n=this),i=t.clone();for(var o=0,r=n.toArray();o<r.length;o++)i.add(r[o]);return i},lunr.SortedSet.prototype.toJSON=function(){return this.toArray()},function(e,t){"function"==typeof define&&define.amd?define(t):"object"==typeof exports?module.exports=t():e.elasticlunr=t()}(this,function(){return t})}();
    /** pdoc search index */const docs = [{"fullname": "dataset", "modulename": "dataset", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "dataset.CarBikeDataModule", "modulename": "dataset", "qualname": "CarBikeDataModule", "kind": "class", "doc": "<p>PyTorch Lightning DataModule for loading and preparing a binary image classification dataset\nconsisting of car and bike images.</p>\n\n<p>This module assumes the dataset is organized in the standard ImageFolder format, with separate \nsubdirectories for each class.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>data_dir</strong> (str, optional):\nPath to the directory containing the dataset. Defaults to '../data/processed/Car-Bike-Dataset'.</li>\n<li><strong>batch_size</strong> (int, optional):\nNumber of samples per batch to load. Defaults to 8.</li>\n</ul>\n", "bases": "pytorch_lightning.core.datamodule.LightningDataModule"}, {"fullname": "dataset.CarBikeDataModule.__init__", "modulename": "dataset", "qualname": "CarBikeDataModule.__init__", "kind": "function", "doc": "<p>Attributes:\n    prepare_data_per_node:\n        If True, each LOCAL_RANK=0 will call prepare data.\n        Otherwise only NODE_RANK=0, LOCAL_RANK=0 will prepare data.\n    allow_zero_length_dataloader_with_multiple_devices:\n        If True, dataloader with zero length within local rank is allowed.\n        Default value is False.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">data_dir</span><span class=\"o\">=</span><span class=\"s1\">&#39;/home/alumno/Escritorio/project/myproject/../data/processed/Car-Bike-Dataset&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">batch_size</span><span class=\"o\">=</span><span class=\"mi\">8</span></span>)</span>"}, {"fullname": "dataset.CarBikeDataModule.data_dir", "modulename": "dataset", "qualname": "CarBikeDataModule.data_dir", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "dataset.CarBikeDataModule.batch_size", "modulename": "dataset", "qualname": "CarBikeDataModule.batch_size", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "dataset.CarBikeDataModule.transform", "modulename": "dataset", "qualname": "CarBikeDataModule.transform", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "dataset.CarBikeDataModule.prepare_data", "modulename": "dataset", "qualname": "CarBikeDataModule.prepare_data", "kind": "function", "doc": "<p>Placeholder for data preparation logic such as downloading.</p>\n\n<p>In this case, the dataset is assumed to be local and already prepared.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "dataset.CarBikeDataModule.setup", "modulename": "dataset", "qualname": "CarBikeDataModule.setup", "kind": "function", "doc": "<p>Sets up the training and validation datasets.</p>\n\n<p>It loads the full dataset from disk, applies transformations, and creates train/test splits \nwith a fixed random seed for reproducibility.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>stage</strong> (str or None, optional):\nStage to set up (\"fit\", \"validate\", \"test\", or \"predict\"). Not used in this implementation.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">stage</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "dataset.CarBikeDataModule.train_dataloader", "modulename": "dataset", "qualname": "CarBikeDataModule.train_dataloader", "kind": "function", "doc": "<p>Returns the DataLoader for the training dataset.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>DataLoader</strong>: DataLoader object for the training set.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "dataset.CarBikeDataModule.val_dataloader", "modulename": "dataset", "qualname": "CarBikeDataModule.val_dataloader", "kind": "function", "doc": "<p>Returns the DataLoader for the validation dataset.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>DataLoader</strong>: DataLoader object for the validation set.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "model", "modulename": "model", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "model.CarBikeClassifier", "modulename": "model", "qualname": "CarBikeClassifier", "kind": "class", "doc": "<p>PyTorch Lightning module for binary image classification (Car vs. Bike) using VGG11.</p>\n\n<p>This model uses a pretrained VGG11 backbone from torchvision, with the final fully connected\nlayer adapted for two output classes. Feature extraction layers are frozen during training.</p>\n\n<h6 id=\"attributes\">Attributes</h6>\n\n<ul>\n<li><strong>model</strong> (torchvision.models.VGG):\nPretrained VGG11 model with modified classifier head.</li>\n<li><strong>loss_fn</strong> (nn.Module):\nLoss function used during training (CrossEntropyLoss).</li>\n</ul>\n", "bases": "pytorch_lightning.core.module.LightningModule"}, {"fullname": "model.CarBikeClassifier.__init__", "modulename": "model", "qualname": "CarBikeClassifier.__init__", "kind": "function", "doc": "<p>Initializes the CarBikeClassifier model, replaces the final classifier layer,\nand freezes the convolutional feature extractor.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "model.CarBikeClassifier.model", "modulename": "model", "qualname": "CarBikeClassifier.model", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "model.CarBikeClassifier.loss_fn", "modulename": "model", "qualname": "CarBikeClassifier.loss_fn", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "model.CarBikeClassifier.forward", "modulename": "model", "qualname": "CarBikeClassifier.forward", "kind": "function", "doc": "<p>Forward pass of the model.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>x</strong> (torch.Tensor):\nInput image tensor of shape (B, C, H, W).</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>torch.Tensor</strong>: Output logits of shape (B, 2).</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">x</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "model.CarBikeClassifier.training_step", "modulename": "model", "qualname": "CarBikeClassifier.training_step", "kind": "function", "doc": "<p>Performs a single training step.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>batch</strong> (Tuple[torch.Tensor, torch.Tensor]):\nA batch of input images and their corresponding labels.</li>\n<li><strong>batch_idx</strong> (int):\nIndex of the current batch.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>torch.Tensor</strong>: Loss value for the batch.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">batch</span>, </span><span class=\"param\"><span class=\"n\">batch_idx</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "model.CarBikeClassifier.validation_step", "modulename": "model", "qualname": "CarBikeClassifier.validation_step", "kind": "function", "doc": "<p>Performs a single validation step.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>batch</strong> (Tuple[torch.Tensor, torch.Tensor]):\nA batch of input images and their corresponding labels.</li>\n<li><strong>batch_idx</strong> (int):\nIndex of the current batch.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>torch.Tensor</strong>: Accuracy of the batch.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">batch</span>, </span><span class=\"param\"><span class=\"n\">batch_idx</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "model.CarBikeClassifier.configure_optimizers", "modulename": "model", "qualname": "CarBikeClassifier.configure_optimizers", "kind": "function", "doc": "<p>Configures the optimizer for training.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>torch.optim.Optimizer</strong>: Adam optimizer for training the model.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "train", "modulename": "train", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "evaluate_model", "modulename": "evaluate_model", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "evaluate_model.MODEL_PATH", "modulename": "evaluate_model", "qualname": "MODEL_PATH", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;/home/alumno/Escritorio/project/myproject/../models/car_bike_model.pth&#x27;"}, {"fullname": "evaluate_model.FIGURES_DIR", "modulename": "evaluate_model", "qualname": "FIGURES_DIR", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;/home/alumno/Escritorio/project/myproject/../reports/figures&#x27;"}, {"fullname": "evaluate_model.device", "modulename": "evaluate_model", "qualname": "device", "kind": "variable", "doc": "<p></p>\n", "default_value": "device(type=&#x27;cpu&#x27;)"}, {"fullname": "evaluate_model.model", "modulename": "evaluate_model", "qualname": "model", "kind": "variable", "doc": "<p></p>\n", "default_value": "VGG(\n  (features): Sequential(\n    (0): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    (1): ReLU(inplace=True)\n    (2): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (3): Conv2d(64, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    (4): ReLU(inplace=True)\n    (5): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (6): Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    (7): ReLU(inplace=True)\n    (8): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    (9): ReLU(inplace=True)\n    (10): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (11): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    (12): ReLU(inplace=True)\n    (13): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    (14): ReLU(inplace=True)\n    (15): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (16): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    (17): ReLU(inplace=True)\n    (18): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    (19): ReLU(inplace=True)\n    (20): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n  )\n  (avgpool): AdaptiveAvgPool2d(output_size=(7, 7))\n  (classifier): Sequential(\n    (0): Linear(in_features=25088, out_features=4096, bias=True)\n    (1): ReLU(inplace=True)\n    (2): Dropout(p=0.5, inplace=False)\n    (3): Linear(in_features=4096, out_features=4096, bias=True)\n    (4): ReLU(inplace=True)\n    (5): Dropout(p=0.5, inplace=False)\n    (6): Linear(in_features=4096, out_features=2, bias=True)\n  )\n)"}, {"fullname": "evaluate_model.data_module", "modulename": "evaluate_model", "qualname": "data_module", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;dataset.CarBikeDataModule object&gt;"}, {"fullname": "evaluate_model.val_loader", "modulename": "evaluate_model", "qualname": "val_loader", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;torch.utils.data.dataloader.DataLoader object&gt;"}, {"fullname": "evaluate_model.class_names", "modulename": "evaluate_model", "qualname": "class_names", "kind": "variable", "doc": "<p></p>\n", "default_value": "[&#x27;Bike&#x27;, &#x27;Car&#x27;]"}, {"fullname": "evaluate_model.num_classes", "modulename": "evaluate_model", "qualname": "num_classes", "kind": "variable", "doc": "<p></p>\n", "default_value": "2"}, {"fullname": "evaluate_model.all_preds", "modulename": "evaluate_model", "qualname": "all_preds", "kind": "variable", "doc": "<p></p>\n", "default_value": "[np.int64(0), np.int64(0), np.int64(0), np.int64(0), np.int64(0), np.int64(0), np.int64(0), np.int64(0), np.int64(0), np.int64(0), np.int64(1), np.int64(1), np.int64(1), np.int64(1), np.int64(1), np.int64(1), np.int64(1), np.int64(1), np.int64(1), np.int64(1)]"}, {"fullname": "evaluate_model.all_probs_per_class", "modulename": "evaluate_model", "qualname": "all_probs_per_class", "kind": "variable", "doc": "<p></p>\n", "default_value": "[[np.float32(1.0), np.float32(1.0), np.float32(1.0), np.float32(1.0), np.float32(1.0), np.float32(1.0), np.float32(1.0), np.float32(1.0), np.float32(1.0), np.float32(1.0), np.float32(0.0), np.float32(0.0), np.float32(0.0), np.float32(0.0), np.float32(0.0), np.float32(0.0), np.float32(0.0), np.float32(0.0), np.float32(0.0), np.float32(0.0)], [np.float32(0.0), np.float32(3.150787e-10), np.float32(0.0), np.float32(0.0), np.float32(0.0), np.float32(1.9581017e-35), np.float32(3.760583e-29), np.float32(0.0), np.float32(0.0), np.float32(1.4182955e-32), np.float32(1.0), np.float32(1.0), np.float32(1.0), np.float32(1.0), np.float32(1.0), np.float32(1.0), np.float32(1.0), np.float32(1.0), np.float32(1.0), np.float32(1.0)]]"}, {"fullname": "evaluate_model.all_labels", "modulename": "evaluate_model", "qualname": "all_labels", "kind": "variable", "doc": "<p></p>\n", "default_value": "[np.int64(0), np.int64(0), np.int64(0), np.int64(0), np.int64(0), np.int64(0), np.int64(0), np.int64(0), np.int64(0), np.int64(0), np.int64(1), np.int64(1), np.int64(1), np.int64(1), np.int64(1), np.int64(1), np.int64(1), np.int64(1), np.int64(1), np.int64(1)]"}, {"fullname": "evaluate_model.all_losses", "modulename": "evaluate_model", "qualname": "all_losses", "kind": "variable", "doc": "<p></p>\n", "default_value": "[np.float32(-0.0), np.float32(-0.0), np.float32(-0.0), np.float32(-0.0), np.float32(-0.0), np.float32(-0.0), np.float32(-0.0), np.float32(-0.0), np.float32(-0.0), np.float32(-0.0), np.float32(-0.0), np.float32(-0.0), np.float32(-0.0), np.float32(-0.0), np.float32(-0.0), np.float32(-0.0), np.float32(-0.0), np.float32(-0.0), np.float32(-0.0), np.float32(-0.0)]"}, {"fullname": "evaluate_model.all_images", "modulename": "evaluate_model", "qualname": "all_images", "kind": "variable", "doc": "<p></p>\n", "default_value": "[tensor([[[2.2489, 2.2489, 2.2489,  ..., 2.2489, 2.2489, 2.2489],\n         [2.2489, 2.2489, 2.2489,  ..., 2.2489, 2.2489, 2.2489],\n         [2.2489, 2.2489, 2.2489,  ..., 2.2489, 2.2489, 2.2489],\n         ...,\n         [2.2489, 2.2489, 2.2489,  ..., 2.2489, 2.2489, 2.2489],\n         [2.2489, 2.2489, 2.2489,  ..., 2.2489, 2.2489, 2.2489],\n         [2.2489, 2.2489, 2.2489,  ..., 2.2489, 2.2489, 2.2489]],\n\n        [[2.4286, 2.4286, 2.4286,  ..., 2.4286, 2.4286, 2.4286],\n         [2.4286, 2.4286, 2.4286,  ..., 2.4286, 2.4286, 2.4286],\n         [2.4286, 2.4286, 2.4286,  ..., 2.4286, 2.4286, 2.4286],\n         ...,\n         [2.4286, 2.4286, 2.4286,  ..., 2.4286, 2.4286, 2.4286],\n         [2.4286, 2.4286, 2.4286,  ..., 2.4286, 2.4286, 2.4286],\n         [2.4286, 2.4286, 2.4286,  ..., 2.4286, 2.4286, 2.4286]],\n\n        [[2.6400, 2.6400, 2.6400,  ..., 2.6400, 2.6400, 2.6400],\n         [2.6400, 2.6400, 2.6400,  ..., 2.6400, 2.6400, 2.6400],\n         [2.6400, 2.6400, 2.6400,  ..., 2.6400, 2.6400, 2.6400],\n         ...,\n         [2.6400, 2.6400, 2.6400,  ..., 2.6400, 2.6400, 2.6400],\n         [2.6400, 2.6400, 2.6400,  ..., 2.6400, 2.6400, 2.6400],\n         [2.6400, 2.6400, 2.6400,  ..., 2.6400, 2.6400, 2.6400]]]), tensor([[[2.2489, 2.2489, 2.2489,  ..., 1.2385, 1.8037, 2.1119],\n         [2.2489, 2.2489, 2.2489,  ..., 1.0844, 1.4098, 1.9578],\n         [2.2489, 2.2489, 2.2489,  ..., 1.1187, 0.9988, 1.7865],\n         ...,\n         [2.2489, 2.2489, 2.2489,  ..., 2.2489, 2.2489, 2.2489],\n         [2.2489, 2.2489, 2.2489,  ..., 2.2489, 2.2489, 2.2489],\n         [2.2489, 2.2489, 2.2489,  ..., 2.2489, 2.2489, 2.2489]],\n\n        [[2.4286, 2.4286, 2.4286,  ..., 1.3957, 1.9734, 2.2885],\n         [2.4286, 2.4286, 2.4286,  ..., 1.2381, 1.5707, 2.1310],\n         [2.4286, 2.4286, 2.4286,  ..., 1.2731, 1.1506, 1.9559],\n         ...,\n         [2.4286, 2.4286, 2.4286,  ..., 2.4286, 2.4286, 2.4286],\n         [2.4286, 2.4286, 2.4286,  ..., 2.4286, 2.4286, 2.4286],\n         [2.4286, 2.4286, 2.4286,  ..., 2.4286, 2.4286, 2.4286]],\n\n        [[2.6400, 2.6400, 2.6400,  ..., 1.6117, 2.1868, 2.5006],\n         [2.6400, 2.6400, 2.6400,  ..., 1.4548, 1.7860, 2.3437],\n         [2.6400, 2.6400, 2.6400,  ..., 1.4897, 1.3677, 2.1694],\n         ...,\n         [2.6400, 2.6400, 2.6400,  ..., 2.6400, 2.6400, 2.6400],\n         [2.6400, 2.6400, 2.6400,  ..., 2.6400, 2.6400, 2.6400],\n         [2.6400, 2.6400, 2.6400,  ..., 2.6400, 2.6400, 2.6400]]]), tensor([[[-1.8268, -1.8268, -1.8268,  ..., -1.7925, -1.7925, -1.7583],\n         [-1.8268, -1.8268, -1.8268,  ..., -1.7412, -1.7412, -1.7583],\n         [-1.8268, -1.8268, -1.8097,  ..., -1.7069, -1.7069, -1.7583],\n         ...,\n         [ 0.1083,  0.0912, -0.0629,  ..., -1.5870, -1.6555, -1.7240],\n         [ 0.0569,  0.0741, -0.1143,  ..., -1.9124, -1.7583, -1.5528],\n         [ 0.0398,  0.0227,  0.0569,  ..., -1.3815, -1.4329, -1.4672]],\n\n        [[-1.7381, -1.7381, -1.7381,  ..., -1.6681, -1.6681, -1.6331],\n         [-1.7381, -1.7381, -1.7381,  ..., -1.6155, -1.6155, -1.6331],\n         [-1.7381, -1.7381, -1.7206,  ..., -1.5805, -1.5805, -1.6155],\n         ...,\n         [ 0.1877,  0.1702,  0.0126,  ...,  0.1001, -0.3375, -0.7752],\n         [ 0.1352,  0.1527, -0.0399,  ..., -0.8102, -0.9503, -1.0378],\n         [ 0.1176,  0.1001,  0.1352,  ..., -0.8102, -1.0378, -1.2304]],\n\n        [[-1.5081, -1.5081, -1.5081,  ..., -1.6650, -1.6476, -1.6127],\n         [-1.5081, -1.5081, -1.5081,  ..., -1.6127, -1.5953, -1.6127],\n         [-1.5081, -1.5081, -1.4907,  ..., -1.5779, -1.5604, -1.5953],\n         ...,\n         [ 0.2871,  0.2696,  0.1128,  ...,  0.8099,  0.2348, -0.3404],\n         [ 0.2348,  0.2522,  0.0605,  ..., -0.2010, -0.4798, -0.7064],\n         [ 0.2522,  0.2173,  0.2696,  ..., -0.2358, -0.6018, -0.9330]]]), tensor([[[ 2.2318,  2.2318,  2.2318,  ...,  2.2318,  2.2318,  2.2318],\n         [ 2.2318,  2.2318,  2.2318,  ...,  2.2318,  2.2318,  2.2318],\n         [ 2.2318,  2.2318,  2.2318,  ...,  2.2318,  2.2318,  2.2318],\n         ...,\n         [ 2.2147,  2.1975,  2.1975,  ..., -0.9534, -0.9705, -1.0219],\n         [ 2.2318,  2.2318,  2.2147,  ..., -0.9534, -0.9877, -1.0904],\n         [ 2.2318,  2.2318,  2.2318,  ..., -1.0048, -1.0904, -1.1589]],\n\n        [[ 2.4111,  2.4111,  2.4111,  ...,  2.4111,  2.4111,  2.4111],\n         [ 2.4111,  2.4111,  2.4111,  ...,  2.4111,  2.4111,  2.4111],\n         [ 2.4111,  2.4111,  2.4111,  ...,  2.4111,  2.4111,  2.4111],\n         ...,\n         [ 2.3936,  2.3761,  2.3761,  ..., -0.8452, -0.8627, -0.9153],\n         [ 2.4111,  2.4111,  2.3936,  ..., -0.8452, -0.8803, -0.9853],\n         [ 2.4111,  2.4111,  2.4111,  ..., -0.8978, -0.9853, -1.0553]],\n\n        [[ 2.6226,  2.6226,  2.6226,  ...,  2.6226,  2.6226,  2.6226],\n         [ 2.6226,  2.6226,  2.6226,  ...,  2.6226,  2.6226,  2.6226],\n         [ 2.6226,  2.6226,  2.6226,  ...,  2.6226,  2.6226,  2.6226],\n         ...,\n         [ 2.6051,  2.5877,  2.5877,  ..., -0.5844, -0.6018, -0.6541],\n         [ 2.6226,  2.6226,  2.6051,  ..., -0.5844, -0.6193, -0.7413],\n         [ 2.6226,  2.6226,  2.6226,  ..., -0.6367, -0.7238, -0.8110]]]), tensor([[[ 0.9646,  0.9474,  0.9474,  ..., -0.5253, -0.5253, -0.4054],\n         [ 0.9646,  0.9474,  0.9474,  ..., -0.4911, -0.4568, -0.3369],\n         [ 0.9646,  0.9474,  0.9474,  ..., -0.5082, -0.5253, -0.4054],\n         ...,\n         [ 1.0844,  1.2214,  1.1529,  ...,  0.2624,  0.2111,  0.2967],\n         [ 1.1015,  1.2385,  1.1358,  ...,  0.5193,  0.4508,  0.3309],\n         [ 0.9474,  1.0673,  0.9474,  ...,  0.9646,  0.9646,  0.8789]],\n\n        [[ 1.4132,  1.3957,  1.3957,  ..., -0.2850, -0.2850, -0.1625],\n         [ 1.4132,  1.3957,  1.3957,  ..., -0.2500, -0.2150, -0.0924],\n         [ 1.4132,  1.3957,  1.3957,  ..., -0.2675, -0.2850, -0.1625],\n         ...,\n         [ 1.0805,  1.2381,  1.1681,  ...,  0.2577,  0.2052,  0.2927],\n         [ 1.0630,  1.2031,  1.0980,  ...,  0.4853,  0.4153,  0.3102],\n         [ 0.8880,  1.0280,  0.9055,  ...,  0.9230,  0.9055,  0.8354]],\n\n        [[ 1.9777,  1.9603,  1.9603,  ...,  0.0779,  0.0779,  0.1999],\n         [ 1.9777,  1.9603,  1.9603,  ...,  0.1128,  0.1476,  0.2696],\n         [ 1.9777,  1.9603,  1.9603,  ...,  0.0953,  0.0779,  0.1999],\n         ...,\n         [ 0.8622,  1.0017,  0.9319,  ..., -0.2010, -0.2707, -0.1835],\n         [ 0.9319,  1.0714,  0.9668,  ...,  0.2348,  0.1651,  0.0256],\n         [ 0.8099,  0.9319,  0.8099,  ...,  0.8274,  0.8099,  0.7054]]]), tensor([[[ 2.2489,  2.2489,  2.2489,  ...,  2.2489,  2.2489,  2.2489],\n         [ 2.2489,  2.2489,  2.2489,  ...,  2.2489,  2.2489,  2.2489],\n         [ 2.2489,  2.2489,  2.2489,  ...,  2.2489,  2.2489,  2.2489],\n         ...,\n         [ 0.5022,  0.4166,  0.6734,  ...,  1.1015,  1.1700,  1.1015],\n         [ 1.0159,  1.0331,  1.0502,  ...,  1.1529,  1.3927,  1.1187],\n         [ 1.2728,  1.1872,  1.2728,  ...,  1.0502,  0.9132,  1.1187]],\n\n        [[ 2.2010,  2.2010,  2.2010,  ...,  2.1660,  2.1660,  2.1660],\n         [ 2.2010,  2.2010,  2.2010,  ...,  2.1660,  2.1660,  2.1660],\n         [ 2.2010,  2.2010,  2.2010,  ...,  2.1660,  2.1660,  2.1660],\n         ...,\n         [ 0.1176,  0.0126,  0.2752,  ...,  0.7129,  0.8004,  0.7304],\n         [ 0.6429,  0.6429,  0.6604,  ...,  0.7129,  0.9580,  0.6604],\n         [ 0.9230,  0.8354,  0.9405,  ...,  0.6254,  0.4678,  0.6429]],\n\n        [[ 2.2740,  2.2740,  2.2740,  ...,  2.2914,  2.2914,  2.2914],\n         [ 2.2740,  2.2740,  2.2740,  ...,  2.2914,  2.2914,  2.2914],\n         [ 2.2740,  2.2740,  2.2740,  ...,  2.2914,  2.2914,  2.2914],\n         ...,\n         [ 0.0256, -0.0790,  0.1651,  ...,  0.5311,  0.6531,  0.5834],\n         [ 0.4788,  0.4788,  0.5136,  ...,  0.5311,  0.7576,  0.4788],\n         [ 0.7402,  0.6705,  0.8274,  ...,  0.4439,  0.2696,  0.4091]]]), tensor([[[ 2.2489,  2.2489,  2.2489,  ...,  2.2489,  2.2489,  2.2489],\n         [ 2.2489,  2.2489,  2.2489,  ...,  2.2489,  2.2489,  2.2489],\n         [ 2.2489,  2.2489,  2.2489,  ...,  2.2489,  2.2489,  2.2489],\n         ...,\n         [ 2.2489,  2.2489,  2.2489,  ..., -1.0219, -1.0904, -1.1760],\n         [ 2.2489,  2.2489,  2.2489,  ..., -1.1418, -1.1418, -1.2274],\n         [ 2.2489,  2.2489,  2.2489,  ..., -1.4500, -1.5357, -1.5185]],\n\n        [[ 2.4286,  2.4286,  2.4286,  ...,  2.4286,  2.4286,  2.4286],\n         [ 2.4286,  2.4286,  2.4286,  ...,  2.4286,  2.4286,  2.4286],\n         [ 2.4286,  2.4286,  2.4286,  ...,  2.4286,  2.4286,  2.4286],\n         ...,\n         [ 2.4286,  2.4286,  2.4286,  ..., -0.8803, -0.9503, -1.0553],\n         [ 2.4286,  2.4286,  2.4286,  ..., -1.0028, -1.0028, -1.0903],\n         [ 2.4286,  2.4286,  2.4286,  ..., -1.3004, -1.3880, -1.3880]],\n\n        [[ 2.6400,  2.6400,  2.6400,  ...,  2.6400,  2.6400,  2.6400],\n         [ 2.6400,  2.6400,  2.6400,  ...,  2.6400,  2.6400,  2.6400],\n         [ 2.6400,  2.6400,  2.6400,  ...,  2.6400,  2.6400,  2.6400],\n         ...,\n         [ 2.6400,  2.6400,  2.6400,  ..., -0.6715, -0.7413, -0.8284],\n         [ 2.6400,  2.6400,  2.6400,  ..., -0.7936, -0.8110, -0.8807],\n         [ 2.6400,  2.6400,  2.6400,  ..., -1.1247, -1.1944, -1.1770]]]), tensor([[[2.2489, 2.2489, 2.2489,  ..., 2.2489, 2.2489, 2.2489],\n         [2.2489, 2.2489, 2.2489,  ..., 2.2489, 2.2489, 2.2489],\n         [2.2489, 2.2489, 2.2489,  ..., 2.2489, 2.2489, 2.2489],\n         ...,\n         [2.2489, 2.2489, 2.2489,  ..., 2.2489, 2.2489, 2.2489],\n         [2.2489, 2.2489, 2.2489,  ..., 2.2489, 2.2489, 2.2489],\n         [2.2489, 2.2489, 2.2489,  ..., 2.2489, 2.2489, 2.2489]],\n\n        [[2.4286, 2.4286, 2.4286,  ..., 2.4286, 2.4286, 2.4286],\n         [2.4286, 2.4286, 2.4286,  ..., 2.4286, 2.4286, 2.4286],\n         [2.4286, 2.4286, 2.4286,  ..., 2.4286, 2.4286, 2.4286],\n         ...,\n         [2.4286, 2.4286, 2.4286,  ..., 2.4286, 2.4286, 2.4286],\n         [2.4286, 2.4286, 2.4286,  ..., 2.4286, 2.4286, 2.4286],\n         [2.4286, 2.4286, 2.4286,  ..., 2.4286, 2.4286, 2.4286]],\n\n        [[2.6400, 2.6400, 2.6400,  ..., 2.6400, 2.6400, 2.6400],\n         [2.6400, 2.6400, 2.6400,  ..., 2.6400, 2.6400, 2.6400],\n         [2.6400, 2.6400, 2.6400,  ..., 2.6400, 2.6400, 2.6400],\n         ...,\n         [2.6400, 2.6400, 2.6400,  ..., 2.6400, 2.6400, 2.6400],\n         [2.6400, 2.6400, 2.6400,  ..., 2.6400, 2.6400, 2.6400],\n         [2.6400, 2.6400, 2.6400,  ..., 2.6400, 2.6400, 2.6400]]]), tensor([[[ 1.3070,  1.3242,  1.3413,  ...,  2.2489,  2.2489,  2.2318],\n         [ 1.2728,  1.2728,  1.2899,  ...,  2.2489,  2.2318,  2.2318],\n         [ 1.2385,  1.2385,  1.2385,  ...,  2.2318,  2.2147,  2.2147],\n         ...,\n         [ 1.0159,  1.0673,  1.0844,  ...,  0.8789,  0.8104,  0.5536],\n         [ 0.6049,  0.6906,  0.8447,  ...,  0.8961,  0.6906,  0.6734],\n         [ 0.7248,  0.7933,  0.8447,  ...,  1.0502,  0.9817,  1.1187]],\n\n        [[ 0.9405,  0.9230,  0.9405,  ...,  1.2731,  1.2031,  1.1331],\n         [ 0.9055,  0.9055,  0.9055,  ...,  1.2906,  1.2206,  1.1331],\n         [ 0.8880,  0.8880,  0.8880,  ...,  1.2556,  1.1856,  1.1331],\n         ...,\n         [ 0.6779,  0.6954,  0.7654,  ...,  0.5728,  0.4853,  0.1702],\n         [ 0.2752,  0.3277,  0.5028,  ...,  0.5903,  0.3803,  0.3277],\n         [ 0.3978,  0.4328,  0.5028,  ...,  0.7304,  0.6604,  0.7654]],\n\n        [[ 0.9668,  0.9842,  0.9842,  ...,  0.6705,  0.6705,  0.6705],\n         [ 0.9842,  0.9842,  0.9842,  ...,  0.6356,  0.6531,  0.6705],\n         [ 1.0017,  1.0017,  1.0017,  ...,  0.6182,  0.6705,  0.6879],\n         ...,\n         [ 0.5311,  0.5485,  0.6182,  ...,  0.3568,  0.2696, -0.0441],\n         [ 0.1302,  0.1825,  0.3568,  ...,  0.3742,  0.1651,  0.1128],\n         [ 0.2696,  0.3219,  0.3742,  ...,  0.5136,  0.4439,  0.5311]]]), tensor([[[-2.1179, -2.1179, -2.1179,  ..., -2.1179, -2.1179, -2.1179],\n         [-2.1179, -2.1179, -2.1179,  ..., -2.1179, -2.1179, -2.1179],\n         [-2.1179, -2.1179, -2.1179,  ..., -2.1179, -2.1179, -2.1179],\n         ...,\n         [-2.1179, -2.1179, -2.1179,  ..., -1.4329, -1.4672, -1.4843],\n         [-2.1179, -2.1179, -2.1179,  ..., -1.3644, -1.3130, -1.1418],\n         [-2.1179, -2.1179, -2.1179,  ..., -1.2103, -1.1760, -1.0562]],\n\n        [[-2.0357, -2.0357, -2.0357,  ..., -2.0357, -2.0357, -2.0357],\n         [-2.0357, -2.0357, -2.0357,  ..., -2.0357, -2.0357, -2.0357],\n         [-2.0357, -2.0357, -2.0357,  ..., -2.0357, -2.0357, -2.0357],\n         ...,\n         [-2.0357, -2.0357, -2.0357,  ..., -1.3354, -1.3704, -1.3880],\n         [-2.0357, -2.0357, -2.0357,  ..., -1.2654, -1.2129, -1.0378],\n         [-2.0357, -2.0357, -2.0357,  ..., -1.1078, -1.0728, -0.9503]],\n\n        [[-1.8044, -1.8044, -1.8044,  ..., -1.8044, -1.8044, -1.8044],\n         [-1.8044, -1.8044, -1.8044,  ..., -1.8044, -1.8044, -1.8044],\n         [-1.8044, -1.8044, -1.8044,  ..., -1.8044, -1.8044, -1.8044],\n         ...,\n         [-1.8044, -1.8044, -1.8044,  ..., -1.1073, -1.1421, -1.1596],\n         [-1.8044, -1.8044, -1.8044,  ..., -1.0376, -0.9853, -0.8110],\n         [-1.8044, -1.8044, -1.8044,  ..., -0.8807, -0.8458, -0.7238]]]), tensor([[[ 1.4954,  1.4954,  1.4954,  ..., -0.9020, -0.8678, -1.0904],\n         [ 1.4612,  1.4612,  1.4783,  ..., -1.1418, -0.9877, -0.9534],\n         [ 1.4098,  1.4269,  1.4440,  ..., -1.2617, -1.0733, -0.8164],\n         ...,\n         [ 0.9817,  0.9817,  0.9817,  ...,  1.1187,  1.1015,  1.1015],\n         [ 0.9817,  0.9817,  0.9817,  ...,  1.1529,  1.1358,  1.1358],\n         [ 0.9988,  0.9988,  0.9988,  ...,  1.1872,  1.1872,  1.1872]],\n\n        [[ 1.4307,  1.4307,  1.4307,  ..., -0.6527, -0.6176, -0.8452],\n         [ 1.4657,  1.4482,  1.4307,  ..., -0.9153, -0.7577, -0.7227],\n         [ 1.4832,  1.4657,  1.4482,  ..., -1.0378, -0.8452, -0.5826],\n         ...,\n         [ 1.1331,  1.1331,  1.1331,  ...,  1.0980,  1.0805,  1.0805],\n         [ 1.1331,  1.1331,  1.1331,  ...,  1.1506,  1.1331,  1.1331],\n         [ 1.1506,  1.1506,  1.1506,  ...,  1.1856,  1.1856,  1.1856]],\n\n        [[ 1.9428,  1.9428,  1.9428,  ..., -0.6541, -0.6193, -0.8458],\n         [ 1.9428,  1.9428,  1.9428,  ..., -0.8633, -0.7064, -0.6890],\n         [ 1.9428,  1.9428,  1.9428,  ..., -0.9678, -0.7587, -0.5147],\n         ...,\n         [ 1.3502,  1.3502,  1.3502,  ...,  1.2457,  1.2282,  1.2282],\n         [ 1.3502,  1.3502,  1.3502,  ...,  1.2805,  1.2631,  1.2631],\n         [ 1.3677,  1.3677,  1.3677,  ...,  1.3154,  1.3154,  1.3154]]]), tensor([[[1.0159, 1.0159, 1.0159,  ..., 0.6392, 0.6221, 0.6221],\n         [1.0331, 1.0331, 1.0331,  ..., 0.6392, 0.6392, 0.6221],\n         [1.0331, 1.0331, 1.0331,  ..., 0.6392, 0.6392, 0.6221],\n         ...,\n         [0.5364, 0.5364, 0.5193,  ..., 0.6392, 0.6392, 0.6392],\n         [0.5707, 0.5536, 0.5536,  ..., 0.6392, 0.6392, 0.6392],\n         [0.5878, 0.5707, 0.5707,  ..., 0.6392, 0.6392, 0.6392]],\n\n        [[1.0980, 1.0980, 1.0980,  ..., 0.7129, 0.6954, 0.6954],\n         [1.1155, 1.1155, 1.1155,  ..., 0.7129, 0.7129, 0.6954],\n         [1.1155, 1.1155, 1.1155,  ..., 0.7129, 0.7129, 0.6954],\n         ...,\n         [0.6078, 0.6078, 0.5903,  ..., 0.7129, 0.7129, 0.7129],\n         [0.6604, 0.6429, 0.6429,  ..., 0.7129, 0.7129, 0.7129],\n         [0.6954, 0.6779, 0.6779,  ..., 0.7129, 0.7129, 0.7129]],\n\n        [[1.2980, 1.2980, 1.2980,  ..., 0.8797, 0.8797, 0.8971],\n         [1.3154, 1.3154, 1.3154,  ..., 0.8797, 0.8797, 0.8971],\n         [1.3154, 1.3154, 1.3154,  ..., 0.8797, 0.8797, 0.8971],\n         ...,\n         [0.8448, 0.8448, 0.8274,  ..., 0.8797, 0.9145, 0.9145],\n         [0.8971, 0.8797, 0.8797,  ..., 0.8797, 0.9145, 0.9145],\n         [0.9319, 0.9145, 0.9145,  ..., 0.8797, 0.9145, 0.9145]]]), tensor([[[ 2.2489,  2.2489,  2.2489,  ...,  2.2489,  2.2489,  2.2489],\n         [ 2.2489,  2.2489,  2.2489,  ...,  2.2489,  2.2489,  2.2489],\n         [ 2.2489,  2.2489,  2.2489,  ...,  2.2489,  2.2489,  2.2489],\n         ...,\n         [-0.9363, -0.9363, -0.9363,  ..., -0.9363, -0.9363, -0.9363],\n         [ 2.2489,  2.2489,  2.2489,  ...,  2.2489,  2.2489,  2.2489],\n         [ 2.2489,  2.2489,  2.2489,  ...,  2.2489,  2.2489,  2.2489]],\n\n        [[ 2.4286,  2.4286,  2.4286,  ...,  2.4286,  2.4286,  2.4286],\n         [ 2.4286,  2.4286,  2.4286,  ...,  2.4286,  2.4286,  2.4286],\n         [ 2.4286,  2.4286,  2.4286,  ...,  2.4286,  2.4286,  2.4286],\n         ...,\n         [-0.7577, -0.7577, -0.7577,  ..., -0.7577, -0.7577, -0.7577],\n         [ 2.4286,  2.4286,  2.4286,  ...,  2.4286,  2.4286,  2.4286],\n         [ 2.4286,  2.4286,  2.4286,  ...,  2.4286,  2.4286,  2.4286]],\n\n        [[ 2.6400,  2.6400,  2.6400,  ...,  2.6400,  2.6400,  2.6400],\n         [ 2.6400,  2.6400,  2.6400,  ...,  2.6400,  2.6400,  2.6400],\n         [ 2.6400,  2.6400,  2.6400,  ...,  2.6400,  2.6400,  2.6400],\n         ...,\n         [-0.5321, -0.5321, -0.5321,  ..., -0.5321, -0.5321, -0.5321],\n         [ 2.6400,  2.6400,  2.6400,  ...,  2.6400,  2.6400,  2.6400],\n         [ 2.6400,  2.6400,  2.6400,  ...,  2.6400,  2.6400,  2.6400]]]), tensor([[[1.9920, 1.9749, 1.9749,  ..., 2.0605, 2.0605, 2.0605],\n         [1.9920, 1.9749, 1.9749,  ..., 2.0605, 2.0605, 2.0605],\n         [1.9920, 1.9749, 1.9749,  ..., 2.0605, 2.0605, 2.0605],\n         ...,\n         [1.9920, 1.9920, 1.9920,  ..., 2.0263, 2.0263, 2.0263],\n         [2.0092, 2.0092, 2.0092,  ..., 2.0263, 2.0263, 2.0263],\n         [2.0263, 2.0263, 2.0263,  ..., 2.0263, 2.0263, 2.0263]],\n\n        [[2.0434, 2.0259, 2.0259,  ..., 1.9384, 1.9384, 1.9384],\n         [2.0434, 2.0259, 2.0259,  ..., 1.9384, 1.9384, 1.9384],\n         [2.0434, 2.0259, 2.0259,  ..., 1.9384, 1.9384, 1.9384],\n         ...,\n         [2.3060, 2.3060, 2.3060,  ..., 2.3410, 2.3410, 2.3410],\n         [2.3235, 2.3235, 2.3235,  ..., 2.3410, 2.3410, 2.3410],\n         [2.3410, 2.3410, 2.3410,  ..., 2.3410, 2.3410, 2.3410]],\n\n        [[1.9428, 1.9254, 1.9254,  ..., 1.6988, 1.6988, 1.6988],\n         [1.9428, 1.9254, 1.9254,  ..., 1.6988, 1.6988, 1.6988],\n         [1.9428, 1.9254, 1.9254,  ..., 1.6988, 1.6988, 1.6988],\n         ...,\n         [2.5703, 2.5703, 2.5703,  ..., 2.6051, 2.6051, 2.6051],\n         [2.5877, 2.5877, 2.5877,  ..., 2.6051, 2.6051, 2.6051],\n         [2.6051, 2.6051, 2.6051,  ..., 2.6051, 2.6051, 2.6051]]]), tensor([[[-1.2788, -1.2788, -1.2788,  ..., -1.0390, -1.0390, -1.0733],\n         [-1.2788, -1.2788, -1.2788,  ..., -1.0390, -1.0390, -1.0904],\n         [-1.2788, -1.2788, -1.2788,  ..., -1.0562, -1.0562, -1.0733],\n         ...,\n         [-0.7993, -0.7993, -0.7993,  ..., -0.7650, -0.7650, -0.7822],\n         [-0.7993, -0.7993, -0.7993,  ..., -0.7650, -0.7650, -0.7822],\n         [-0.7993, -0.7993, -0.7993,  ..., -0.7650, -0.7650, -0.7822]],\n\n        [[-1.0203, -1.0203, -1.0203,  ..., -0.8803, -0.8803, -0.8803],\n         [-1.0203, -1.0203, -1.0203,  ..., -0.8803, -0.8803, -0.8452],\n         [-1.0203, -1.0203, -1.0203,  ..., -0.8627, -0.8627, -0.8627],\n         ...,\n         [-0.5476, -0.5476, -0.5476,  ..., -0.5826, -0.5826, -0.6001],\n         [-0.5476, -0.5476, -0.5476,  ..., -0.5826, -0.5826, -0.6001],\n         [-0.5476, -0.5476, -0.5476,  ..., -0.5826, -0.5826, -0.6001]],\n\n        [[-0.6715, -0.6715, -0.6715,  ..., -0.5670, -0.5670, -0.5844],\n         [-0.6715, -0.6715, -0.6715,  ..., -0.5670, -0.5670, -0.5670],\n         [-0.6715, -0.6890, -0.6890,  ..., -0.5670, -0.5670, -0.5670],\n         ...,\n         [-0.2707, -0.2707, -0.2707,  ..., -0.3404, -0.3404, -0.3578],\n         [-0.2707, -0.2707, -0.2707,  ..., -0.3404, -0.3404, -0.3578],\n         [-0.2707, -0.2707, -0.2707,  ..., -0.3404, -0.3404, -0.3578]]]), tensor([[[-0.8164, -0.8164, -0.8164,  ...,  0.0227, -0.1828, -0.4739],\n         [-0.8164, -0.8164, -0.8164,  ...,  0.4337,  0.6563,  0.8276],\n         [-0.8164, -0.8164, -0.8164,  ...,  0.3309,  0.4508,  0.6734],\n         ...,\n         [-1.7069, -1.6727, -1.6727,  ..., -1.9467, -1.9467, -1.9467],\n         [-1.6727, -1.6727, -1.6727,  ..., -1.9638, -1.9638, -1.9638],\n         [-1.7412, -1.7069, -1.6898,  ..., -1.9638, -1.9638, -1.9638]],\n\n        [[-0.1975, -0.1975, -0.1975,  ...,  0.3452,  0.0826, -0.2500],\n         [-0.1975, -0.1975, -0.1975,  ...,  0.8354,  0.9930,  1.1331],\n         [-0.1975, -0.1975, -0.1975,  ...,  0.7129,  0.8179,  1.0105],\n         ...,\n         [-1.3880, -1.3529, -1.3704,  ..., -1.7731, -1.7731, -1.7731],\n         [-1.3529, -1.3529, -1.3529,  ..., -1.7906, -1.8081, -1.8081],\n         [-1.4405, -1.4055, -1.3880,  ..., -1.8081, -1.8081, -1.8081]],\n\n        [[ 0.1651,  0.1651,  0.1651,  ...,  0.7228,  0.4091,  0.0953],\n         [ 0.1651,  0.1651,  0.1651,  ...,  1.2631,  1.3677,  1.4722],\n         [ 0.1651,  0.1651,  0.1651,  ...,  1.1237,  1.2282,  1.3502],\n         ...,\n         [-1.1596, -1.1247, -1.1421,  ..., -1.5430, -1.5430, -1.5430],\n         [-1.1247, -1.1247, -1.1247,  ..., -1.5604, -1.5779, -1.5779],\n         [-1.2119, -1.1770, -1.1596,  ..., -1.5779, -1.5779, -1.5779]]]), tensor([[[2.2489, 2.2489, 2.2489,  ..., 2.2489, 2.2489, 2.2489],\n         [2.2489, 2.2489, 2.2489,  ..., 2.2489, 2.2489, 2.2489],\n         [2.2489, 2.2489, 2.2489,  ..., 2.2489, 2.2489, 2.2489],\n         ...,\n         [2.2489, 2.2489, 2.2489,  ..., 2.2489, 2.2489, 2.2489],\n         [2.2489, 2.2489, 2.2489,  ..., 2.2489, 2.2489, 2.2489],\n         [2.2489, 2.2489, 2.2489,  ..., 2.2489, 2.2489, 2.2489]],\n\n        [[2.4286, 2.4286, 2.4286,  ..., 2.4286, 2.4286, 2.4286],\n         [2.4286, 2.4286, 2.4286,  ..., 2.4286, 2.4286, 2.4286],\n         [2.4286, 2.4286, 2.4286,  ..., 2.4286, 2.4286, 2.4286],\n         ...,\n         [2.4286, 2.4286, 2.4286,  ..., 2.4286, 2.4286, 2.4286],\n         [2.4286, 2.4286, 2.4286,  ..., 2.4286, 2.4286, 2.4286],\n         [2.4286, 2.4286, 2.4286,  ..., 2.4286, 2.4286, 2.4286]],\n\n        [[2.6400, 2.6400, 2.6400,  ..., 2.6400, 2.6400, 2.6400],\n         [2.6400, 2.6400, 2.6400,  ..., 2.6400, 2.6400, 2.6400],\n         [2.6400, 2.6400, 2.6400,  ..., 2.6400, 2.6400, 2.6400],\n         ...,\n         [2.6400, 2.6400, 2.6400,  ..., 2.6400, 2.6400, 2.6400],\n         [2.6400, 2.6400, 2.6400,  ..., 2.6400, 2.6400, 2.6400],\n         [2.6400, 2.6400, 2.6400,  ..., 2.6400, 2.6400, 2.6400]]]), tensor([[[-1.2617, -1.2617, -1.2617,  ..., -1.2617, -1.2617, -1.2274],\n         [-1.2617, -1.2617, -1.2617,  ..., -1.2274, -1.2274, -1.2274],\n         [-1.2617, -1.2617, -1.2617,  ..., -1.2445, -1.2445, -1.2274],\n         ...,\n         [-1.1932, -1.1760, -1.1760,  ..., -1.1418, -1.1418, -1.1418],\n         [-1.1760, -1.1760, -1.1760,  ..., -1.1418, -1.1418, -1.1589],\n         [-1.1760, -1.1760, -1.1760,  ..., -1.1418, -1.1418, -1.1589]],\n\n        [[-1.4930, -1.4930, -1.4930,  ..., -1.4405, -1.4405, -1.4580],\n         [-1.4930, -1.4930, -1.4930,  ..., -1.4580, -1.4580, -1.4580],\n         [-1.4930, -1.4930, -1.4930,  ..., -1.4580, -1.4580, -1.4580],\n         ...,\n         [-1.4230, -1.4055, -1.4055,  ..., -1.3704, -1.3704, -1.3704],\n         [-1.4055, -1.4055, -1.4055,  ..., -1.3704, -1.3704, -1.3880],\n         [-1.4055, -1.4055, -1.4055,  ..., -1.3704, -1.3704, -1.3880]],\n\n        [[-1.3339, -1.3339, -1.3339,  ..., -1.2990, -1.2990, -1.2990],\n         [-1.3339, -1.3339, -1.3339,  ..., -1.2990, -1.2990, -1.2990],\n         [-1.3339, -1.3339, -1.3339,  ..., -1.2990, -1.2990, -1.2990],\n         ...,\n         [-1.2641, -1.2467, -1.2467,  ..., -1.2119, -1.2119, -1.2119],\n         [-1.2467, -1.2467, -1.2467,  ..., -1.2119, -1.2119, -1.2293],\n         [-1.2467, -1.2467, -1.2467,  ..., -1.2119, -1.2119, -1.2293]]]), tensor([[[2.2489, 2.2489, 2.2489,  ..., 2.2489, 2.2489, 2.2489],\n         [2.2489, 2.2489, 2.2489,  ..., 2.2489, 2.2489, 2.2489],\n         [2.2489, 2.2489, 2.2489,  ..., 2.2489, 2.2489, 2.2489],\n         ...,\n         [2.2489, 2.2489, 2.2489,  ..., 2.2489, 2.2489, 2.2489],\n         [2.2489, 2.2489, 2.2489,  ..., 2.2489, 2.2489, 2.2489],\n         [2.2489, 2.2489, 2.2489,  ..., 2.2489, 2.2489, 2.2489]],\n\n        [[2.4286, 2.4286, 2.4286,  ..., 2.4286, 2.4286, 2.4286],\n         [2.4286, 2.4286, 2.4286,  ..., 2.4286, 2.4286, 2.4286],\n         [2.4286, 2.4286, 2.4286,  ..., 2.4286, 2.4286, 2.4286],\n         ...,\n         [2.4286, 2.4286, 2.4286,  ..., 2.4286, 2.4286, 2.4286],\n         [2.4286, 2.4286, 2.4286,  ..., 2.4286, 2.4286, 2.4286],\n         [2.4286, 2.4286, 2.4286,  ..., 2.4286, 2.4286, 2.4286]],\n\n        [[2.6400, 2.6400, 2.6400,  ..., 2.6400, 2.6400, 2.6400],\n         [2.6400, 2.6400, 2.6400,  ..., 2.6400, 2.6400, 2.6400],\n         [2.6400, 2.6400, 2.6400,  ..., 2.6400, 2.6400, 2.6400],\n         ...,\n         [2.6400, 2.6400, 2.6400,  ..., 2.6400, 2.6400, 2.6400],\n         [2.6400, 2.6400, 2.6400,  ..., 2.6400, 2.6400, 2.6400],\n         [2.6400, 2.6400, 2.6400,  ..., 2.6400, 2.6400, 2.6400]]]), tensor([[[ 1.2214,  1.3755,  1.2214,  ..., -1.2788, -1.2788, -0.7650],\n         [ 1.1187,  1.3242,  1.2385,  ..., -1.2445, -1.2788, -0.7822],\n         [ 1.4954,  1.5125,  1.5125,  ..., -1.2617, -1.2788, -0.7822],\n         ...,\n         [ 1.1872,  1.1358,  1.1700,  ..., -1.3815, -1.3815, -1.3815],\n         [ 1.1529,  1.1872,  1.1529,  ..., -1.3644, -1.3644, -1.3644],\n         [ 1.1529,  1.2214,  1.2214,  ..., -1.3644, -1.3473, -1.3644]],\n\n        [[ 1.4657,  1.4832,  1.2031,  ..., -1.3529, -1.3529, -0.9503],\n         [ 1.3256,  1.5007,  1.3782,  ..., -1.3179, -1.3529, -0.9503],\n         [ 1.7108,  1.7458,  1.7458,  ..., -1.3179, -1.3354, -0.9678],\n         ...,\n         [ 1.3782,  1.3256,  1.3606,  ..., -1.2829, -1.2829, -1.2829],\n         [ 1.3431,  1.3782,  1.3431,  ..., -1.2654, -1.2654, -1.2654],\n         [ 1.3431,  1.4132,  1.4132,  ..., -1.2654, -1.2479, -1.2654]],\n\n        [[ 1.4025,  1.2980,  0.9145,  ..., -1.1596, -1.1770, -0.8981],\n         [ 1.3502,  1.4722,  1.3154,  ..., -1.1421, -1.1770, -0.8981],\n         [ 1.9603,  2.0125,  2.0300,  ..., -1.1421, -1.1596, -0.8807],\n         ...,\n         [ 1.2282,  1.1759,  1.2108,  ..., -1.0550, -1.0550, -1.0550],\n         [ 1.1934,  1.2282,  1.1934,  ..., -1.0376, -1.0376, -1.0201],\n         [ 1.1934,  1.2631,  1.2631,  ..., -1.0376, -1.0201, -1.0027]]])]"}, {"fullname": "evaluate_model.loss_fn", "modulename": "evaluate_model", "qualname": "loss_fn", "kind": "variable", "doc": "<p></p>\n", "default_value": "CrossEntropyLoss()"}, {"fullname": "evaluate_model.accuracy", "modulename": "evaluate_model", "qualname": "accuracy", "kind": "variable", "doc": "<p></p>\n", "default_value": "1.0"}, {"fullname": "evaluate_model.cm", "modulename": "evaluate_model", "qualname": "cm", "kind": "variable", "doc": "<p></p>\n", "default_value": "array([[10,  0],\n       [ 0, 10]])"}, {"fullname": "evaluate_model.disp", "modulename": "evaluate_model", "qualname": "disp", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;sklearn.metrics._plot.confusion_matrix.ConfusionMatrixDisplay object&gt;"}, {"fullname": "evaluate_model.unnormalize", "modulename": "evaluate_model", "qualname": "unnormalize", "kind": "function", "doc": "<p>Reverses normalization on a tensor image using ImageNet stats.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>img_tensor</strong> (torch.Tensor):\nImage tensor normalized with ImageNet statistics, of shape (C, H, W).</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>torch.Tensor</strong>: Unnormalized image tensor with same shape.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">img_tensor</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "evaluate_model.top_k", "modulename": "evaluate_model", "qualname": "top_k", "kind": "variable", "doc": "<p></p>\n", "default_value": "5"}, {"fullname": "evaluate_model.top_k_indices", "modulename": "evaluate_model", "qualname": "top_k_indices", "kind": "variable", "doc": "<p></p>\n", "default_value": "array([15, 16, 17, 18, 19])"}, {"fullname": "evaluate_model.to_pil", "modulename": "evaluate_model", "qualname": "to_pil", "kind": "variable", "doc": "<p></p>\n", "default_value": "ToPILImage()"}, {"fullname": "plot_training_curves", "modulename": "plot_training_curves", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "plot_training_curves.LOG_DIR", "modulename": "plot_training_curves", "qualname": "LOG_DIR", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;/home/alumno/Escritorio/project/myproject/tb_logs/car_bike_model/version_0&#x27;"}, {"fullname": "plot_training_curves.FIGURES_DIR", "modulename": "plot_training_curves", "qualname": "FIGURES_DIR", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;/home/alumno/Escritorio/project/myproject/../reports/figures&#x27;"}, {"fullname": "plot_training_curves.ea", "modulename": "plot_training_curves", "qualname": "ea", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;tensorboard.backend.event_processing.event_accumulator.EventAccumulator object&gt;"}, {"fullname": "plot_training_curves.tags", "modulename": "plot_training_curves", "qualname": "tags", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;images&#x27;: [], &#x27;audio&#x27;: [], &#x27;histograms&#x27;: [], &#x27;scalars&#x27;: [&#x27;val_acc&#x27;, &#x27;epoch&#x27;, &#x27;train_loss&#x27;], &#x27;distributions&#x27;: [], &#x27;tensors&#x27;: [], &#x27;graph&#x27;: False, &#x27;meta_graph&#x27;: False, &#x27;run_metadata&#x27;: []}"}, {"fullname": "plot_training_curves.events_to_df", "modulename": "plot_training_curves", "qualname": "events_to_df", "kind": "function", "doc": "<p>Convert a list of TensorBoard scalar events to a pandas DataFrame.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>events</strong> (List[tensorboard.EventAccumulator.ScalarEvent]):\nList of scalar events extracted from TensorBoard logs.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>pd.DataFrame</strong>: DataFrame containing 'step' and 'value' columns.</li>\n</ul>\n\n<h6 id=\"examples\">Examples</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span> <span class=\"o\">=</span> <span class=\"n\">events_to_df</span><span class=\"p\">(</span><span class=\"n\">ea</span><span class=\"o\">.</span><span class=\"n\">Scalars</span><span class=\"p\">(</span><span class=\"s1\">&#39;train_loss&#39;</span><span class=\"p\">))</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">head</span><span class=\"p\">()</span>\n<span class=\"go\">   step   value</span>\n<span class=\"go\">0     1  0.6932</span>\n<span class=\"go\">1     2  0.5874</span>\n<span class=\"go\">...</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">events</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}];

    // mirrored in build-search-index.js (part 1)
    // Also split on html tags. this is a cheap heuristic, but good enough.
    elasticlunr.tokenizer.setSeperator(/[\s\-.;&_'"=,()]+|<[^>]*>/);

    let searchIndex;
    if (docs._isPrebuiltIndex) {
        console.info("using precompiled search index");
        searchIndex = elasticlunr.Index.load(docs);
    } else {
        console.time("building search index");
        // mirrored in build-search-index.js (part 2)
        searchIndex = elasticlunr(function () {
            this.pipeline.remove(elasticlunr.stemmer);
            this.pipeline.remove(elasticlunr.stopWordFilter);
            this.addField("qualname");
            this.addField("fullname");
            this.addField("annotation");
            this.addField("default_value");
            this.addField("signature");
            this.addField("bases");
            this.addField("doc");
            this.setRef("fullname");
        });
        for (let doc of docs) {
            searchIndex.addDoc(doc);
        }
        console.timeEnd("building search index");
    }

    return (term) => searchIndex.search(term, {
        fields: {
            qualname: {boost: 4},
            fullname: {boost: 2},
            annotation: {boost: 2},
            default_value: {boost: 2},
            signature: {boost: 2},
            bases: {boost: 2},
            doc: {boost: 1},
        },
        expand: true
    });
})();